//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/thePlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ThePlayerMovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ThePlayerMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""thePlayerMovement"",
    ""maps"": [
        {
            ""name"": ""ExternalController"",
            ""id"": ""df2e6587-d7ce-41c3-b9f3-c4f00ddc0831"",
            ""actions"": [
                {
                    ""name"": ""playerMoves"",
                    ""type"": ""Value"",
                    ""id"": ""79d08079-d602-4640-a61d-475077504574"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e6703f6-5ed8-4726-9395-4bef8e612ee1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""playerMoves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ExternalController
        m_ExternalController = asset.FindActionMap("ExternalController", throwIfNotFound: true);
        m_ExternalController_playerMoves = m_ExternalController.FindAction("playerMoves", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ExternalController
    private readonly InputActionMap m_ExternalController;
    private List<IExternalControllerActions> m_ExternalControllerActionsCallbackInterfaces = new List<IExternalControllerActions>();
    private readonly InputAction m_ExternalController_playerMoves;
    public struct ExternalControllerActions
    {
        private @ThePlayerMovement m_Wrapper;
        public ExternalControllerActions(@ThePlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @playerMoves => m_Wrapper.m_ExternalController_playerMoves;
        public InputActionMap Get() { return m_Wrapper.m_ExternalController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExternalControllerActions set) { return set.Get(); }
        public void AddCallbacks(IExternalControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_ExternalControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExternalControllerActionsCallbackInterfaces.Add(instance);
            @playerMoves.started += instance.OnPlayerMoves;
            @playerMoves.performed += instance.OnPlayerMoves;
            @playerMoves.canceled += instance.OnPlayerMoves;
        }

        private void UnregisterCallbacks(IExternalControllerActions instance)
        {
            @playerMoves.started -= instance.OnPlayerMoves;
            @playerMoves.performed -= instance.OnPlayerMoves;
            @playerMoves.canceled -= instance.OnPlayerMoves;
        }

        public void RemoveCallbacks(IExternalControllerActions instance)
        {
            if (m_Wrapper.m_ExternalControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExternalControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_ExternalControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExternalControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExternalControllerActions @ExternalController => new ExternalControllerActions(this);
    public interface IExternalControllerActions
    {
        void OnPlayerMoves(InputAction.CallbackContext context);
    }
}
