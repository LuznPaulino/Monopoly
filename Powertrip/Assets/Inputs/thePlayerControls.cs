//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/thePlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ThePlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ThePlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""thePlayerControls"",
    ""maps"": [
        {
            ""name"": ""CursorMoveAroundExternalController"",
            ""id"": ""3d0a8e6b-8566-4f16-9fa4-ef81b127f9c1"",
            ""actions"": [
                {
                    ""name"": ""CursorMoves"",
                    ""type"": ""Value"",
                    ""id"": ""202045b3-6e55-4dfb-9bfe-f226924b11dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b1eee58-a918-46c3-9f5e-bd8fef140d4e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ExternalController"",
                    ""action"": ""CursorMoves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10586679-fff8-4119-ac5d-3e93136a068d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseController"",
                    ""action"": ""CursorMoves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ExternalController"",
            ""bindingGroup"": ""ExternalController"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MouseController"",
            ""bindingGroup"": ""MouseController"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CursorMoveAroundExternalController
        m_CursorMoveAroundExternalController = asset.FindActionMap("CursorMoveAroundExternalController", throwIfNotFound: true);
        m_CursorMoveAroundExternalController_CursorMoves = m_CursorMoveAroundExternalController.FindAction("CursorMoves", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CursorMoveAroundExternalController
    private readonly InputActionMap m_CursorMoveAroundExternalController;
    private List<ICursorMoveAroundExternalControllerActions> m_CursorMoveAroundExternalControllerActionsCallbackInterfaces = new List<ICursorMoveAroundExternalControllerActions>();
    private readonly InputAction m_CursorMoveAroundExternalController_CursorMoves;
    public struct CursorMoveAroundExternalControllerActions
    {
        private @ThePlayerControls m_Wrapper;
        public CursorMoveAroundExternalControllerActions(@ThePlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CursorMoves => m_Wrapper.m_CursorMoveAroundExternalController_CursorMoves;
        public InputActionMap Get() { return m_Wrapper.m_CursorMoveAroundExternalController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CursorMoveAroundExternalControllerActions set) { return set.Get(); }
        public void AddCallbacks(ICursorMoveAroundExternalControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_CursorMoveAroundExternalControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CursorMoveAroundExternalControllerActionsCallbackInterfaces.Add(instance);
            @CursorMoves.started += instance.OnCursorMoves;
            @CursorMoves.performed += instance.OnCursorMoves;
            @CursorMoves.canceled += instance.OnCursorMoves;
        }

        private void UnregisterCallbacks(ICursorMoveAroundExternalControllerActions instance)
        {
            @CursorMoves.started -= instance.OnCursorMoves;
            @CursorMoves.performed -= instance.OnCursorMoves;
            @CursorMoves.canceled -= instance.OnCursorMoves;
        }

        public void RemoveCallbacks(ICursorMoveAroundExternalControllerActions instance)
        {
            if (m_Wrapper.m_CursorMoveAroundExternalControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICursorMoveAroundExternalControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_CursorMoveAroundExternalControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CursorMoveAroundExternalControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CursorMoveAroundExternalControllerActions @CursorMoveAroundExternalController => new CursorMoveAroundExternalControllerActions(this);
    private int m_ExternalControllerSchemeIndex = -1;
    public InputControlScheme ExternalControllerScheme
    {
        get
        {
            if (m_ExternalControllerSchemeIndex == -1) m_ExternalControllerSchemeIndex = asset.FindControlSchemeIndex("ExternalController");
            return asset.controlSchemes[m_ExternalControllerSchemeIndex];
        }
    }
    private int m_MouseControllerSchemeIndex = -1;
    public InputControlScheme MouseControllerScheme
    {
        get
        {
            if (m_MouseControllerSchemeIndex == -1) m_MouseControllerSchemeIndex = asset.FindControlSchemeIndex("MouseController");
            return asset.controlSchemes[m_MouseControllerSchemeIndex];
        }
    }
    public interface ICursorMoveAroundExternalControllerActions
    {
        void OnCursorMoves(InputAction.CallbackContext context);
    }
}
